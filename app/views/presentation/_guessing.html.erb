<%= render partial: "showing_question", locals: { question: question } %>

<table id="answer_table" style="height: 100px; width: 100%; position: absolute; top: 210px; display: none;">
  <tr>
    <td valign="center">
      <center>
        <p style="font-size: 30px;">Durchschnitt: <%= mean.to_s.gsub(".", ",") %></p>
        <p style="margin-top: -20px; font-size: 20px;">Rollinger: <span id='rollinger_diff'></span> | Lücke: <span id='luecke_diff'></span></p>
      </center>
    </td>
  </tr>
</table>

<center>
  <div id="drawing_canvas" style="margin-top: 230px;"></div>
</center>

<script type="text/javascript">

  $("#question_table").animate({
      top: "-210px"
  });

  var answers = [<%= answers.join(", ") %>];
  var mean = <%= mean %>;

  var stageWidth = 950;
  var stageHeight = 370;

  var min = <%= min %>;
  var max = <%= max %>;

  var stage = new Kinetic.Stage({
    container: "drawing_canvas",
    width: stageWidth,
    height: stageHeight
  });

  var layer = new Kinetic.Layer();

  var lineConf = {
    stroke: "black",
    strokeWidth: 5,
    lineCap: "round",
    lineJoin: "round"
  };

  var minText = new Kinetic.Text({
    x: 10,
    y: 200,
    text: min,
    fontSize: 20,
    fontFamily: "Tahoma",
    fill: "black"
  });
  layer.add(minText);

  var maxText = new Kinetic.Text({
    x: 940,
    y: 200,
    text: max,
    fontSize: 20,
    fontFamily: "Tahoma",
    fill: "black"
  });

  maxText.setOffset({
      x: maxText.getWidth()
      });

  layer.add(maxText);

  var baseLine = new Kinetic.Line(
      $.extend({}, lineConf, {points: [10, 250, 940, 250]})
      );

  var leftLine = new Kinetic.Line(
      $.extend({}, lineConf, {points: [10, 235, 10, 265]})
      );

  var rightLine = new Kinetic.Line(
      $.extend({}, lineConf, {points: [940, 235, 940, 265]})
      );

/*  for(i = 1; i <= 15; i+=1){
    line = new Kinetic.Line(
      $.extend({}, lineConf, {points: [10 + 62 * i, 240, 10 + 62 * i, 260], strokeWidth: 2})
        );
    layer.add(line);
  }
*/

  var guessValueToLineLocation = function(guess){
    return 930 * (1.0 * (guess - min) / (max - min)) + 10;
  }

  var guessValueToHeadLocation = function(guess) {
    return Math.max(Math.min(guessValueToLineLocation(guess) - 36, 940 - 200), 10);
  }

  var drawHeadWithLabel = function(president, guess) {
    var rollingerLayer = new Kinetic.Layer();

    var xOffset = guessValueToHeadLocation(guess);
    var guessLocation = guessValueToLineLocation(guess) - xOffset;
    var yOffset = 0;
    var lineOffset = 0;

    if(president == 'rollinger'){
      yOffset = -170;
      lineOffset = 121;
    }

    var rollingerGroup = new Kinetic.Group({
          x: xOffset,
          y: yOffset,
        });

    var rollingerImageContainer = new Image();
    rollingerImageContainer.onload = function(){
      var rollingerImage = new Kinetic.Image({
            x: 0,
            y: 300,
            image: rollingerImageContainer,
            width: 73,
            height: 73
          });
      rollingerGroup.add(rollingerImage);

      var rollingerLabelText = new Kinetic.Text({
          x: 80,
          y: 305,
          text: president == 'rollinger' ? "Rollinger" : "Lücke",
          fontSize: 30,
          fontFamily: "Tahoma",
          fill: "black"
          });
      rollingerGroup.add(rollingerLabelText);

      var rollingerPointText = new Kinetic.Text({
          x: 80,
          y: 335,
          text: guess.toString().replace(".", ","),
          fontSize: 30,
          fontFamily: "Tahoma",
          fill: "black"
          });
      rollingerGroup.add(rollingerPointText);

      var linePoints = [36, 290 + lineOffset, guessLocation, 260 + lineOffset]
      if(president == 'rollinger'){
        linePoints = [guessLocation, 290 + lineOffset, 36, 260 + lineOffset]
      }

      var rollingerLine = new Kinetic.Line(
          $.extend({}, lineConf, {points: linePoints, strokeWidth: 2})
          );
      rollingerGroup.add(rollingerLine);

      rollingerLayer.setOpacity(0.0);
      rollingerLayer.add(rollingerGroup);
      stage.add(rollingerLayer);
      var rollingerTween = new Kinetic.Tween({
            node: rollingerLayer,
            duration: 0.5,
            opacity: 1
          });
      rollingerTween.play();
    };

    if(president == 'rollinger')
      rollingerImageContainer.src = "<%= asset_path 'rollinger.png' %>"
    else
      rollingerImageContainer.src = "<%= asset_path 'luecke.png' %>"

  }

  layer.add(baseLine);
  layer.add(leftLine);
  layer.add(rightLine);
  stage.add(layer);

  var lueckeDrawn = false;
  var rollingerDrawn = false;
  var answersShown = false;
  var lueckeDiff = null;
  var rollingerDiff = null;
  var answerLayer = new Kinetic.Layer();

  var drawAnswers = function(){
    $.each(answers, function(idx, obj){
        setTimeout(function(){
            animateAnswer(obj);
        }, Math.random() * 5000);
      });
  };

  $(document).bind("keyup.space", function(event){
      if(event.which == 32){
        if(!answersShown){
          $("#points_audio").get(0).volume = 1;
          $("#points_audio").get(0).play();
          drawAnswers();
          answersShown = true;
        } else {
          $(document).unbind("keyup.space");


          circle = new Kinetic.Circle({
            x: guessValueToLineLocation(mean),
            y: 250,
            radius: 0,
            fill: "green",
            stroke: "black",
            strokeWidth: 1,
            opacity: 0
              });

          answerLayer.add(circle);

          circleTween = new Kinetic.Tween({
            node: circle,
            duration: 1,
            opacity: 1,
            radius: 20
              });

          $("#answer_audio").get(0).volume = 1;
          $("#answer_audio").get(0).play();

          circleTween.play();

          setTimeout(function(){
              $("#answer_table").fadeIn("slow");
            }, 1000);

        }
      }
      });

  var observePresidentAnswers = function(){
    $.getJSON('president_answers', function(data){
        if(data.answer_luecke != null && !lueckeDrawn){
          drawHeadWithLabel('luecke', data.answer_luecke);
          lueckeDiff = data.answer_luecke - mean;
          lueckeDrawn = true;
        }
        if(data.answer_rollinger != null && !rollingerDrawn){
          drawHeadWithLabel('rollinger', data.answer_rollinger);
          rollingerDiff = data.answer_rollinger - mean;
          rollingerDrawn = true;
        }

        if(rollingerDrawn && lueckeDrawn){
          clearInterval(intervalHandle);

          $("#luecke_diff").text((lueckeDiff > 0 ? "+" : "") + lueckeDiff.toFixed(2).toString().replace(".", ","));
          $("#rollinger_diff").text((rollingerDiff > 0 ? "+" : "") + rollingerDiff.toFixed(2).toString().replace(".", ","));

        }
    });
  };

  var intervalHandle = null;
  $(function(){
    intervalHandle = setInterval(observePresidentAnswers, 1000);
  });

  stage.add(answerLayer);
  var randOffset = 15;
  var startRadius = 15;
  var targetRadius = 5;

  var animateAnswer = function(value){
    h = Math.random() * randOffset;
    randomArc = Math.random() * 3.14;
    yOffset = Math.sin(randomArc) * h;
    xOffset = Math.cos(randomArc) * h;

    xPos = guessValueToLineLocation(value) + xOffset;
    yPos = 244 + yOffset;

    circle = new Kinetic.Circle({
      x: xPos,
      y: yPos,
      radius: targetRadius, //startRadius,
      fill: "red",
      stroke: "black",
      strokeWidth: 1,
      opacity: 1 // 0
        });

    answerLayer.add(circle);
    answerLayer.draw();

/*    var circleTween = new Kinetic.Tween({
      node: circle,
      duration: 0.5,
      opacity: 1,
      radius: targetRadius
        });

    circleTween.play();
    */
  }

</script>
